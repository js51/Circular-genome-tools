from cgt import *
from sage.all_cmdline import *  # import sage library


S_4 = SymmetricGroup(4)
C = CC # Complex field
CS_4 =  GroupAlgebra(S_4,C)
s = CS_4('(1,2)') + CS_4('(2,3)') + CS_4('(3,4)') + CS_4('(1,4)')

n = 3
def regrep(g): 
	""" regular representation """
	return matrix([(s*S_4(g)).to_vector() for g in S_4]).transpose()

minimum_poly = regrep(s).minpoly().factor()
print(minimum_poly)
HO = gap.new('WreathProduct(SymmetricGroup(2),SymmetricGroup(3))')
show(HO.Elements())

A = SignedPermutations(4).list()
show(A)

HO = gap.new('WreathProduct(CyclicGroup(2),SymmetricGroup(%s))'%(n))
HO_sage_group = [sigma for sigma in SymmetricGroup(2*n) if sigma in HO]
HO_sage_group = PermutationGroup(HO_sage_group)
signed_permutations_group = SignedPermutations(n)
signed_permutations_group_in_S_n = PermutationGroup([sigma for sigma in signed_permutations_group.as_permutation_group()])

print(HO)
print("HO group as signed permutations: ", list(signed_permutations_group)[29])
print("HO group as subgroup of S_n: ", list(signed_permutations_group_in_S_n)[29])
print("HO group GAP -> SAGE: ", list(HO_sage_group)[29])
print("Elements in group: ", HO_sage_group.order())
print("Elements in parent symmetric group", SymmetricGroup(2*n).order())

HO_reps = gap.new('IrreducibleRepresentations(%s)'%(HO.name()))
for sigma in HO_sage_group:
	for rep in HO_reps:
		x = gap.new("Image(%s,%s)" %(rep.name(), str(sigma)))
		# show(matrix(x.sage()))
		

#A = SignedPermutations(4).list()
#show(A)