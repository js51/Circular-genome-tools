from cgt import *
from sage.all_cmdline import *  # import sage library
import numpy as np

func subgroup_A_generators(n=4):
	

n = 4
print(f'n={n}')
S = list(range(-n, 0)) + list(range(1, n+1)) # The set {+-1, ..., +-n}

SS = SymmetricGroup(S) 	# The symmetric group on S isomorphic to S_n
HO 	= SignedPermutations(n) # Signed permutations of {1,...,n}, a subgroup of S_S above
HO_cycles = SS.subgroup([conversions.signed_permutation_to_cycles(n, sigma) for sigma in HO.gens()]) # Above group HO as a subgroup of S_S above (cycle notation)
O_nZ 	= [conversions.cycles_to_signed_permutation(n, sigma).to_matrix() for sigma in HO_cycles.list()]
SO_nZ 	= HO_cycles.subgroup([conversions.signed_permutation_to_cycles(n, conversions.matrix_to_signed_permutation(n, matrix)) for matrix in O_nZ if np.linalg.det(matrix) == 1])

A = HO_cycles.subgroup(["(1,-1)(2,-2)", "(1,2,-1,-2)", "(1,3,-1,-3)", "(1,4,-1,-4)"])
print(f'Subgroup A generated by {A.gens()} isomorphic to SO(n,Z) ?', SO_nZ.is_isomorphic(A))

B = HO_cycles.subgroup(["(1,-2)(-1,2)", "(1,2)(-1,-2)", "(2,3)(-2,-3)", "(3,4)(-3,-4)"])
print(f'Subgroup B generated by {B.gens()} isomorphic to SO(n,Z) ?', SO_nZ.is_isomorphic(B))

D = CoxeterGroup(['D',n]).as_matrix_group()
print(f'Subgroup A generated by {A.gens()} isomorphic to coxeter group type D?', D.is_isomorphic(A))
print(f'Subgroup B generated by {B.gens()} isomorphic to coxeter group type D?', D.is_isomorphic(B))


n = 5
print(f'n={n}')
S = list(range(-n, 0)) + list(range(1, n+1)) # The set {+-1, ..., +-n}

SS = SymmetricGroup(S) 	# The symmetric group on S isomorphic to S_n
HO 	= SignedPermutations(n) # Signed permutations of {1,...,n}, a subgroup of S_S above
HO_cycles = SS.subgroup([conversions.signed_permutation_to_cycles(n, sigma) for sigma in HO.gens()]) # Above group HO as a subgroup of S_S above (cycle notation)
O_nZ 	= [conversions.cycles_to_signed_permutation(n, sigma).to_matrix() for sigma in HO_cycles.list()]
SO_nZ 	= HO_cycles.subgroup([conversions.signed_permutation_to_cycles(n, conversions.matrix_to_signed_permutation(n, matrix)) for matrix in O_nZ if np.linalg.det(matrix) == 1])

A = HO_cycles.subgroup(["(1,-1)(2,-2)", "(1,2,-1,-2)", "(1,3,-1,-3)", "(1,4,-1,-4)", "(1,5,-1,-5)"])
print(f'Subgroup A generated by {A.gens()} isomorphic to SO(n,Z) ?', SO_nZ.is_isomorphic(A))

B = HO_cycles.subgroup(["(1,-2)(-1,2)", "(1,2)(-1,-2)", "(2,3)(-2,-3)", "(3,4)(-3,-4)", "(4,5)(-4,-5)"])
print(f'Subgroup B generated by {B.gens()} isomorphic to SO(n,Z) ?', SO_nZ.is_isomorphic(B))

D = CoxeterGroup(['D',n]).as_matrix_group()
print(f'Subgroup A generated by {A.gens()} isomorphic to coxeter group type D?', D.is_isomorphic(A))
print(f'Subgroup B generated by {B.gens()} isomorphic to coxeter group type D?', D.is_isomorphic(B))
